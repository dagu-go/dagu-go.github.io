"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[982],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=o,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3474:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],l={},s="All Available Fields",c={unversionedId:"yaml/all-fields",id:"yaml/all-fields",title:"All Available Fields",description:"Combining these settings gives you granular control over how the workflow runs.",source:"@site/docs/yaml/all-fields.md",sourceDirName:"yaml",slug:"/yaml/all-fields",permalink:"/docs/yaml/all-fields",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/yaml/all-fields.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"With Repeating Tasks",permalink:"/docs/yaml/with-repeat"},next:{title:"Global Configuration",permalink:"/docs/yaml/global"}},u={},d=[],p={toc:d};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"all-available-fields"},"All Available Fields"),(0,a.kt)("p",null,"Combining these settings gives you granular control over how the workflow runs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'name: all configuration              # DAG\'s name\ndescription: run a DAG               # DAG\'s description\nenv:                                 # Environment variables\n  LOG_DIR: ${HOME}/logs\n  PATH: /usr/local/bin:${PATH}\nlogDir: ${LOG_DIR}                   # Log directory to write standard output\nhistRetentionDays: 3                 # Execution history retention days (not for log files)\ndelaySec: 1                          # Interval seconds between steps\nmaxActiveRuns: 1                     # Max parallel number of running step\nparams: param1 param2                # Default parameters for the DAG that can be referred to by $1, $2, and so on\npreconditions:                       # Precondisions for whether the DAG is allowed to run\n  - condition: "`echo 1`"            # Command or variables to evaluate\n    expected: "1"                    # Expected value for the condition\nmailOn:\n  failure: true                      # Send a mail when the DAG failed\n  success: true                      # Send a mail when the DAG finished\nMaxCleanUpTimeSec: 300               # The maximum amount of time to wait after sending a TERM signal to running steps before killing them\nhandlerOn:                           # Handlers on Success, Failure, Cancel, and Exit\n  success:\n    command: "echo succeed"          # Command to execute when the DAG execution succeed\n  failure:\n    command: "echo failed"           # Command to execute when the DAG execution failed\n  cancel:\n    command: "echo canceled"         # Command to execute when the DAG execution canceled\n  exit:\n    command: "echo finished"         # Command to execute when the DAG execution finished\nsteps:\n  - name: some task                  # Step\'s name\n    description: some task           # Step\'s description\n    dir: ${HOME}/logs                # Working directory\n    command: python main.py $1       # Command and parameters\n    mailOn:\n      failure: true                  # Send a mail when the step failed\n      success: true                  # Send a mail when the step finished\n    continueOn:\n      failure: true                   # Continue to the next regardless of the step failed or not\n      skipped: true                  # Continue to the next regardless the preconditions are met or not\n    retryPolicy:                     # Retry policy for the step\n      limit: 2                       # Retry up to 2 times when the step failed\n    repeatPolicy:                    # Repeat policy for the step\n      repeat: true                   # Boolean whether to repeat this step\n      intervalSec: 60                # Interval time to repeat the step in seconds\n    preconditions:                   # Precondisions for whether the step is allowed to run\n      - condition: "`echo 1`"        # Command or variables to evaluate\n        expected: "1"                # Expected Value for the condition\n')),(0,a.kt)("p",null,"The global configuration file ",(0,a.kt)("inlineCode",{parentName:"p"},"~/.dagu/config.yaml")," is useful to gather common settings, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"logDir")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"env"),"."))}m.isMDXComponent=!0}}]);